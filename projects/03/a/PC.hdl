/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]     // REGISTER, load=1
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]    // REGISTER, load=0
 *
 * if      (reset[t] == 1) out[t] = 0
 * else if (load[t] == 1)  out[t] =  in[t-1]       // REGISTER, load=1
 * else if (inc[t] == 1)   out[t] = out[t-1] + 1   // integer addition
 * else                    out[t] = out[t-1]       // REGISTER, load=0
 */


// inc chip, register chip, and a bunch of logic gates
CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:

    // REGISTER:
    //  If load(t-1)=1 then out(t)= in(t-1) -- load=1 means NEXT time, output the IN  from THIS TIME
    //  If load(t-1)=0 then out(t)=out(t-1) -- load=0 means NEXT time, output the OUT from THIS TIME (if load=0, NOTHING CHANGES)
    
    // the (previous) OUT of the whole chip will always be the "resolution"(ifReset) of the previous time. 
    Inc16(in=out2, out=incOut);    
    // if inc=1, send along this incremented PREVIOUS output.
    // if inc=0, send along the non-incremented PREVIOUS output. (i.e., keep outputting the same thing)
    Mux16(a=out2, b=incOut, sel=inc, out=ifInc);

    // if load=1, send along NEW input. in other words, LOAD THE NEW INPUT.
    // if load=0, send along ifInc (which was either incremented PREVIOUS output, or PREVIOUS output/same output)
    Mux16(a=ifInc, b=in, sel=load, out=ifLoad);

    // if reset=1, send along/OUTPUT 0 (else pass through -- either inc'ed PREVIOUS out; or the NEW input; or the SAME PREVIOUS output)
    Mux16(a=ifLoad, b=false, sel=reset, out=ifReset);
    
    // this is our FINAL DELAY. it says: 
    // given the INPUT from the REST OF THE CHIP (ifReset)
    //   which is either 0 (reset), NEW in (load), PREV OUT +1 (inc), or simply the SAME PREVIOUS OUTPUT,
    // store it for the NEXT OUTPUT.
    // this also means:
    // THIS TIME, output this register's input from the LAST TIME.
    // if reset=inc=load=0, the input for this register will equal the initial input ("in"),
    //    meaning if reset=inc=load=0, NEXT out will be THIS in.
    Register(in=ifReset, load=true, out=out,out=out2);    
}
