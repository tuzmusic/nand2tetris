// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=dmout0, b=dmout1, c=dmout2, d=dmout3, e=dmout4, f=dmout5, g=dmout6, h=dmout7);

    // send in value to all registers. the dmux output will determine which one will get the load signal.
    // other registers will "ignore" the input signal.
    RAM512(in=in, load=dmout0, address=address[3..11], out=ram0);
    RAM512(in=in, load=dmout1, address=address[3..11], out=ram1);
    RAM512(in=in, load=dmout2, address=address[3..11], out=ram2);
    RAM512(in=in, load=dmout3, address=address[3..11], out=ram3);
    RAM512(in=in, load=dmout4, address=address[3..11], out=ram4);
    RAM512(in=in, load=dmout5, address=address[3..11], out=ram5);
    RAM512(in=in, load=dmout6, address=address[3..11], out=ram6);
    RAM512(in=in, load=dmout7, address=address[3..11], out=ram7);

    // take the signal (16-bit) from all registers, and use the address to select which one to send to the output (16-bit)
    // a-h[16], sel[3], out[16]
    Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[0..2], out=out);
}