/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15]; // addr[0-14]
    OUT out[16];

    // Screen has 13-bit address
    // Keyboard is simply a 16-bit out!
    /* Implementation outline:
     * • Uses RAM16K, Screen (8K registers), and Keyboard (1 register)
     * • Routes the address input to the correct address input of the relevant chip-part. 
     */
    PARTS:
    // RAM16K (14-bit address)
    // 32K addressable 16bit registers
    // [0..13] ignores MSB, aka only uses the first 14 bits, to access the first 16K addresses
    // 2^14 = 16kb (16384 = 16 * 1024)
    // From a 15bit address, addr[0..13] means
    //   100..0 becomes 0..00   !! IMPORTANT
    //   010..0 becomes 10..0
    // this isn't the same as addr << 1!!! (that doesn't truncate!)
    RAM16K(in=in, load=load, address=address[0..13], out=rout);

    /* SCREEN (13-bit address, 0-8191, 2^13-1)
      Access to any address in the range 0x4000-0x5FFF results in accessing the screen memory map.
      100000000000000 to 101111111111111
      100000000000000 (16384 = 2^14) should = 0
      101111111111111 (24575 = 2^14+2^13-1) should = 8191 (01111111111111)
      In other words, we want to subtract 2^14 from the address input?
      Taking the 13 most signif bits of 15 means addr(13) = addr(15) >> 2
      2^15/2^2 = 2^13
      This does seem wrong since that means an addr=2^14 becomes addr=2^12, not 0?
      Don't we want a left shift???

      Seems like 2..14 is correct. With 0..12, the keyboard read line (line 36) doesn't work.
      But maybe that's a keyboard problem?
     */
    // see line 91-ish of the test file. remember that with 
    // this setup, every address we're writing to in the ram
    // winds up, I THINK (???) writing to a relatively random place
    // on the screen. SEEMS BAD, NO?
    Screen(in=in, load=load, address=address[2..14], out=sout);
    // Screen(in=in, load=load, address=address[0..12], out=sout);
    // From a 15bit address, addr[2..14] means 
    //   10..00(15) becomes 10..00(13) (2^15 -> 2^13)
    //   010..0(15) becomes 010..0(13) (2^14 -> 2^12)
    //   10..011(15)becomes 10..00(13) (same as above, LSB2 is truncated)

    Keyboard(out=kout); // well that's easy ain't it?

    /* RAM out && Screen Out (bitwise AND)
    
     */
    And16(a=rout, b=sout, out=rsout); 
    
    
    Or16(a=rsout, b=kout, out=out);
    /* 
      **RAM(0..13) && Screen(2..14) makes it to line 35 and HANGS**
      - line 36 reads from the keyboard
      ~~RAM(0..13) && Screen(1..13) makes it to line 07 and fails~~
      ~~RAM(0..13) && Screen(0..12) makes it to line 07 and fails~~
      ~~RAM(1..14) && Screen(0..12) makes it to line 12 and fails~~
      ~~RAM(1..14) && Screen(1..13) makes it to line 14 and fails~~
      ~~RAM(1..14) && Screen(2..14) makes it to line 14 and fails~~
    
     */
}