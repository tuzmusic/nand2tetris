/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15]; // addr[0-14]
    OUT out[16];
    // RAM16 has 14-bit address
    // Screen has 13-bit address
    // Keyboard is simply a 16-bit out!
    /* Implementation outline:
     * • Uses RAM16K, Screen (8K registers), and Keyboard (1 register)
     * • Routes the address input to the correct address input of the relevant chip-part. 
     */
    PARTS:

    /* pseudocode routing
      if load == 0
        read the address
      if load == 1
        if address < 0x4000 
          write input to RAM (only!)
        if 0x4000 =< address < 0x6000
          write input to SCREEN (only!)    
     */

     /* determining address range
      addr[14] = 0 when addr < 0x4000
      addr[14] = 1 when addr >= 0x4000
      addr[14]=1 && addr[13]=0 when 0x4000 =< addr < 0x6000 (SCREEN)
      addr[14]=1 && addr[13]=1 && addr[0..12]=0 when addr >= 0x6000 (KEYBOARD)
      100000000000000
      */

      /* Strategy
      Can't use DMux with 16bits, right?

      For screen or ram, EITHER
        A: They will always WRITE an input when load=1, (always receive IN and LOAD)
           and the mux will pick between writing the new input and rewriting the chip's old output
        B: Something with load && addr[14] becomes the ram/screen load bit; and the one that gets a 
            0 load bit will output something but it will be ignored.        
       */

      /* SOLUTION B
        RAM and SCREEN get input.
        Load bit is determined by addr[14]
      
       */
       // RAM: when addr[14] = 0 && load = 1, load = 1
      Not(in=address[14], out=IsRamAddress);
      And(a=load, b=IsRamAddress, out=RamShouldLoad);
      RAM16K(in=in, load=RamShouldLoad, address=address[0..13], out=rout);

      // SCREEN: when addr[14] = 1 && load = 1...load = 1
      And(a=load, b=address[14], out=ScreenShouldLoad);
      Screen(in=in, load=ScreenShouldLoad, address=address[0..12], out=sout);

      // Load from keyboard or screen?
      Keyboard(out=kout);
      Mux16(a=sout, b=kout, sel=address[13], out=kmuxs);

      // Output from Keyboard/Screen or RAM?
      Mux16(a=rout, b=kmuxs, sel=address[14], out=out);

      // 8 chips!
      // uses more end-chips, but Not and And use WAY fewer small chips
      // (i.e., Nand gates) than Mux16. 
      // The part of this solution that's different uses 5 nand gates
      // That part of the other one uses 8(nand/mux) * 16(mux/mux16) * 2(mux16/memory) nand gates!q1
      // So this one is much cheaper. Also has less information moving around
      // (so expends less energy? As in actual heat?)
}